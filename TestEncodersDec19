package com.qualcomm.ftcrobotcontroller.opmodes;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;
public class TestEncodersDec19 extends LinearOpMode {
    public DcMotor leftfront;
    public DcMotor leftback;
    public DcMotor rightfront;
    public DcMotor rightback;
    public DcMotorController leftController;
    final static double GEAR_ONE_TEETH = 16;
    final static  double GEAR_TWO_TEETH = 30;
    final double MOTOR_POWER = .5;
    final double GOAL_DIFFERENCE = 100;
    final double DISTANCE_FACTOR = 0.89;
    final double MOTOR_POWER_LEFT = 0.9;
    final double MOTOR_POWER_RIGHT = 0.65;
    final static int ENCODER_CPR = 1120;
    final static double WHEEL_CIRCUMFERENCE = 7 * Math.PI;
    final static double GEAR_RATIO = GEAR_TWO_TEETH/GEAR_ONE_TEETH;
    final static double ROTATIONS = GEAR_RATIO*ENCODER_CPR/WHEEL_CIRCUMFERENCE;

    public void goForward(int inches , double leftPower , double rightPower) throws InterruptedException{
        double goal = ROTATIONS*inches;//Get ticks for the distance needed to travel
        goal = (goal - GOAL_DIFFERENCE) * DISTANCE_FACTOR;
        ResetEncoders();
        leftfront.setTargetPosition((int) goal);
        leftfront.setChannelMode(DcMotorController.RunMode.RUN_TO_POSITION);
        motorPowerRampUp(MOTOR_POWER_LEFT , MOTOR_POWER_RIGHT);
    }

    public void StopDriveMotors(){  //Stopping the robot
        leftfront.setPower(0);
        rightfront.setPower(0);
        leftback.setPower(0);
        rightback.setPower(0);
    }

    public void waitCycle(int count) throws InterruptedException {
        for (int i = count; i > 0; i--) {
            waitOneFullHardwareCycle();
        }
    }

    public void motorPowerRampUp( double leftPower , double rightPower) throws InterruptedException {
        for(int i = 3; i > 0; i--){
            leftfront.setPower(leftPower / i);
            leftback.setPower(leftPower / i);
            rightfront.setPower(rightPower / i);
            rightback.setPower(rightPower / i);
            sleep(250);
        }
    }

    public void ResetEncoders() throws InterruptedException {
        waitCycle(6);
        switchToWriteMode();
        leftfront.setChannelMode(DcMotorController.RunMode.RESET_ENCODERS);
        waitCycle(6);
        leftfront.setChannelMode(DcMotorController.RunMode.RUN_USING_ENCODERS);
        waitCycle(6);
    }

    public void switchToWriteMode() throws InterruptedException {
        leftController.setMotorControllerDeviceMode(DcMotorController.DeviceMode.WRITE_ONLY);
        waitCycle(6);
    }

    public void switchToReadMode() throws InterruptedException {
        leftController.setMotorControllerDeviceMode(DcMotorController.DeviceMode.READ_ONLY);
        waitCycle(6);
    }

    @Override
    public void runOpMode() throws InterruptedException {
        leftfront = hardwareMap.dcMotor.get("lf");
        leftback = hardwareMap.dcMotor.get("lb");
        rightfront = hardwareMap.dcMotor.get("rf");
        rightback = hardwareMap.dcMotor.get("rb");
        leftController = hardwareMap.dcMotorController.get("leftController");
        rightback.setDirection(DcMotor.Direction.REVERSE);
        rightfront.setDirection(DcMotor.Direction.REVERSE);
        switchToWriteMode();
        ResetEncoders();
        leftfront.setChannelMode(DcMotorController.RunMode.RUN_USING_ENCODERS);
        waitCycle(6);

        waitForStart();

        goForward(42 , MOTOR_POWER_LEFT , MOTOR_POWER_RIGHT);

    }
}
